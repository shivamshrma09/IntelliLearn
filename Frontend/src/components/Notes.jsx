import React, { useState, useRef } from 'react';
import { Download, Share2, Bookmark, Edit2, Save, X } from 'lucide-react';
import './Notes.css';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

const Notes = ({ note, currentUser, onSave }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [content, setContent] = useState(note?.content || '');
  const [isBookmarked, setIsBookmarked] = useState(note?.bookmarked || false);
  const notesRef = useRef(null);
  
  const handleDownload = async () => {
    // Create a styled version for PDF
    const element = notesRef.current;
    
    try {
      const canvas = await html2canvas(element, {
        scale: 2,
        logging: false,
        useCORS: true
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = canvas.width;
      const imgHeight = canvas.height;
      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
      const imgX = (pdfWidth - imgWidth * ratio) / 2;
      const imgY = 20;
      
      // Add header with logo and details
      pdf.setFillColor(59, 130, 246);
      pdf.rect(0, 0, pdfWidth, 15, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(12);
      pdf.text('IntelliLearn', 10, 10);
      pdf.text(`${note.subject || 'Study Notes'}`, pdfWidth - 10, 10, { align: 'right' });
      
      // Add user info
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(10);
      pdf.text(`Student: ${currentUser?.name || 'Student'}`, 10, 25);
      pdf.text(`Date: ${new Date().toLocaleDateString()}`, 10, 30);
      pdf.text(`Batch: ${note.batch || 'General'}`, 10, 35);
      
      // Add content
      pdf.addImage(imgData, 'PNG', imgX, imgY + 20, imgWidth * ratio, imgHeight * ratio);
      
      // Add footer
      const pageCount = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setTextColor(128, 128, 128);
        pdf.text(`Generated by IntelliLearn - Page ${i} of ${pageCount}`, pdfWidth / 2, pdfHeight - 10, { align: 'center' });
      }
      
      pdf.save(`${note.title.replace(/\s+/g, '-').toLowerCase()}-notes.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    }
  };
  
  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: note.title,
        text: `Check out my notes on ${note.title}`,
        url: window.location.href,
      });
    } else {
      // Fallback - copy to clipboard
      navigator.clipboard.writeText(`${note.title}: ${content}`);
      alert('Copied to clipboard!');
    }
  };
  
  const handleBookmark = () => {
    setIsBookmarked(!isBookmarked);
    // Add API call to save bookmark status
  };
  
  const handleSave = () => {
    if (onSave) {
      onSave({ ...note, content });
    }
    setIsEditing(false);
  };
  
  return (
    <div className="notes-container">
      <div className="notes-header">
        <h2>{note.title}</h2>
        <div className="notes-actions">
          {isEditing ? (
            <>
              <button className="notes-action-btn save" onClick={handleSave}>
                <Save size={18} />
                <span>Save</span>
              </button>
              <button className="notes-action-btn cancel" onClick={() => setIsEditing(false)}>
                <X size={18} />
                <span>Cancel</span>
              </button>
            </>
          ) : (
            <>
              <button className="notes-action-btn" onClick={() => setIsEditing(true)}>
                <Edit2 size={18} />
                <span>Edit</span>
              </button>
              <button 
                className={`notes-action-btn ${isBookmarked ? 'active' : ''}`}
                onClick={handleBookmark}
              >
                <Bookmark size={18} />
                <span>{isBookmarked ? 'Bookmarked' : 'Bookmark'}</span>
              </button>
              <button className="notes-action-btn" onClick={handleShare}>
                <Share2 size={18} />
                <span>Share</span>
              </button>
              <button className="notes-action-btn" onClick={handleDownload}>
                <Download size={18} />
                <span>Download</span>
              </button>
            </>
          )}
        </div>
      </div>
      
      <div className="notes-meta">
        <span className="notes-meta-item">{note.subject || 'General'}</span>
        <span className="notes-meta-item">{note.batch || 'Study Notes'}</span>
        <span className="notes-meta-item">Last updated: {new Date(note.updatedAt || note.createdAt).toLocaleDateString()}</span>
      </div>
      
      <div className="notes-content-wrapper" ref={notesRef}>
        {isEditing ? (
          <textarea
            className="notes-editor"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Enter your notes here..."
          />
        ) : (
          <div className="notes-content">
            {content.split('\n').map((paragraph, index) => (
              <p key={index}>{paragraph}</p>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Notes;